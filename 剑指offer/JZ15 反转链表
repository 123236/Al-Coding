
输入一个长度为n链表，反转链表后，输出新链表的表头。

数据范围 
要求：空间复杂度O(1)  ，时间复杂度O(n) 。


创建链表类
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class LinkList:
    def __init__(self):
        self.head=None

    def initList(self, data):
        # 创建头结点
        self.head = ListNode(data[0])
        r=self.head
        p = self.head
        # 逐个为 data 内的数据创建结点, 建立链表
        for i in data[1:]:
            node = ListNode(i)
            p.next = node
            p = p.next
        return r
    

            
if __name__ == '__main__':
    l=LinkList()
    data1 = [1, 2, 3]
#     data2= [2, 4, 6]
    l1=l.initList(data1)
#     l2=l.initList(data2)
#     l.printlist(l1)


def ReverseList(pHead):
    tmp = None
#     pHead = pHead.next
    while pHead:
        temp = pHead.next   #这样赋值，然后修改temp会导致pHead也改变
        pHead.next = tmp
        tmp = pHead
        print(tmp.val)
        pHead = temp
    return tmp

def printlist(head):
        if head == None: return
        node = head
        while node != None:
            print(node.val,end='*')
            node = node.next
# ReverseList(l1)
printlist(ReverseList(l1))
