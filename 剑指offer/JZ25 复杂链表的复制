描述
输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，
另一个特殊指针random指向一个随机节点），请对此链表进行深拷贝，并返回拷贝后的头结点。
（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）。 
示例:
输入:{1,2,3,4,5,3,5,#,2,#}
输出:{1,2,3,4,5,3,5,#,2,#}
解析:我们将链表分为两段，前半部分{1,2,3,4,5}为ListNode，后半部分{3,5,#,2,#}是随机指针域表示。
以上示例前半部分可以表示链表为的ListNode:1->2->3->4->5
后半部分，3，5，#，2，#分别的表示为
1的位置指向3，2的位置指向5，3的位置指向null，4的位置指向2，5的位置指向null




# 解题思路：主要在于建立原结点random的结点与新建结点的对应关系
class RandomListNode:
    def __init__(self, x):
        self.label = x
        self.next = None
        self.random = None
# class Solution:
class Solution:
    def Clone(self,pHead):
        if pHead is None:
            return
        p = pHead
        new_h = RandomListNode(p.label)
        random_map = {pHead:new_h}
        p = p.next
        pre_p = new_h
        while p:
            new_p = RandomListNode(p.label)
            random_map[p] = new_p
            pre_p.next = new_p
            pre_p = pre_p.next
            p = p.next
        new_p = new_h
        p = pHead
        while p:
            random_p = p.random
            if random_p:
                new_p.random = random_map[random_p]
            p = p.next
            new_p = new_p.next
        return new_h
        






